struct Compiler : public Parser
{
    std::vector<std::unique_ptr<SymbExpr>> symbExprs;
    std::vector<std::unique_ptr<CompExpr>> compExprs;
    std::vector<SymbExpr*> expStack;
    std::vector<Interval> intStack;
    std::vector<Obj> objects;
    Size frameSize = {512, 512};

    Buffer block{};
    uint blockSize{};
    /*.....*/

    bool compiled = false;

    void actInt(ExprType type);
    void actOp(ExprType type);
    void actDecl();
    
    SymbExpr *newExpr(SymbExpr &e);
    CompExpr *newExpr(CompExpr &e);
    SymbExpr op(Parser::ExprType type, SymbExpr *a = nullptr, SymbExpr *b = nullptr, float number = 0, Table *name = nullptr);
    CompExpr *op(CompExpr::ExprType type, CompExpr *a = nullptr, CompExpr *b = nullptr, float number = 0, Table *name = nullptr, int nTuple = 1);
    CompExpr *_comp(CompExpr *e, unsigned int index, std::vector<Subst> &subs);
    CompExpr *compute(SymbExpr *e, std::vector<Subst> &subs);
    CompExpr *substitute(CompExpr *e, std::vector<Subst> &subs);
    CompExpr *derivative(CompExpr *e, Table *var);
    float calculate(CompExpr *e, std::vector<Subst> &subs);
    void dependencies(CompExpr *e, std::vector<int> &grids, bool allow = false);

    void compile(CompExpr *e, std::stringstream &str, int &v);
    void compile(const char *source);
    void header(std::stringstream &str);
    void compileFunction(CompExpr *exp, int argIndex, std::stringstream &str, std::string name);
    void declareFunction(int N, int argIndex, std::stringstream &str, std::string name, bool declareOnly = false);
};